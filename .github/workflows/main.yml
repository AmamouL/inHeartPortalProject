# GitHub Actions
# https://help.github.com/en/articles/configuring-a-workflow
name: Cypress tests

on: [push, pull_request]
jobs:
  test:
    name: Cypress test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

        # install a specific version of Node using
      # https://github.com/actions/setup-node
      - name: Use Node.js v12
        uses: actions/setup-node@v2
        with:
          node-version: 12

      # Restore the previous NPM modules and Cypress binary archives.
      # Any updated archives will be saved automatically after the entire
      # workflow successfully finishes.
      # See https://github.com/actions/cache
      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Cache Cypress binary
        uses: actions/cache@v1
        with:
          path: ~/.cache/Cypress
          key: cypress-${{ runner.os }}-cypress-${{ hashFiles('**/package.json') }}
          restore-keys: |
            cypress-${{ runner.os }}-cypress-
      - name: install dependencies and verify Cypress
        env:
          # make sure every Cypress install prints minimal information
          CI: 1
        # print Cypress and OS info
        run: |
          npm ci
          npx cypress verify
          npx cypress info
          npx cypress version
          npx cypress version --component package
          npx cypress version --component binary
          npx cypress version --component electron
          npx cypress version --component node

      # Run Cypress tests and records results on the dashboard
      - name: Cypress tests
        id: cypress
        run: npm run cy:run
        env:
          # place your secret record key at
          # https://github.com/cypress-io/cypress-example-kitchensink/settings/secrets
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TERM: xterm
      - name: Print Dashboard URL
        run: |
          echo Cypress finished with: ${{ steps.cypress.outcome }}
           # Save videos and screenshots as test artifacts
      # https://github.com/actions/upload-artifact
      - uses: actions/upload-artifact@master
        with:
          name: screenshots
          path: cypress/screenshots
          # there might be no screenshots created when:
          # - there are no test failures
          # so only upload screenshots if previous step has failed
          if: failure()
      # video should always be generated
      - uses: actions/upload-artifact@master
        with:
          name: videos
          path: cypress/videos
      - uses: actions/upload-artifact@master
        with:
          name: json
          path: cypress/results/json
          if: always()
  gen_report:
    name: Generate test report
    needs: test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: |
          npm install --save-dev rimraf
          npm install --save-dev mochawesome mochawesome-merge 
          npm install --save-dev mochawesome-report-generator
      #  - name: Generate report
      #    run: npm run cy:run:report
      - name: Create reports directory
        run: mkdir reports
      - name: Download test-reports
        uses: actions/download-artifact@master
        with:
          name: json
          path: reports
      - name: Merge and generate reports
        run: |
          mkdir mergedReport
          npx mochawesome-merge 'reports/*.json' > mergedReport/report.json
          npx marge --inline mergedReport/report.json -o mergedReport/
      - name: Upload report
        uses: actions/upload-artifact@master
        with:
          name: html
          path: mergedReport/*.html
  send_report:
    name: Send test report
    needs: gen_report
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Create reports directory
        run: mkdir htmlRep
      - name: Download test-reports
        uses: actions/download-artifact@master
        with:
          name: html
          path: htmlRep
      - uses: MeilCli/slack-upload-file@v1
        id: message
        with:
          slack_token: ${{ secrets.SLACK_TOKEN }}
          channels: ${{ secrets.SLACK_CHANNELS }}
          file_path: "htmlRep/report.html"
          file_name: "htmlRep/report.html"
          file_type: "html"
          initial_comment: "post by slack-upload-file"
      - run: "echo ${{ fromJson(steps.message.outputs.response).file.permalink }}"
